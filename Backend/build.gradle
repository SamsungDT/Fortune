plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.epages.restdocs-api-spec' version '0.18.2'
    id 'jacoco'
}

group = 'dsko'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
    maven {
        name = 'Central Portal Snapshots'
        url = 'https://central.sonatype.com/repository/maven-snapshots/'
    }
}

springBoot {
    buildInfo()
}

dependencies {
    //스프링 웹
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //스프링 타임리프
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    //스프링 시큐리티
    implementation 'org.springframework.boot:spring-boot-starter-security'
    //Oatuh
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //jwt
    implementation("io.jsonwebtoken:jjwt-api:0.12.3")
    implementation("io.jsonwebtoken:jjwt-impl:0.12.3")
    implementation("io.jsonwebtoken:jjwt-jackson:0.12.3")
    implementation 'com.nimbusds:nimbus-jose-jwt:9.37'

    //스프링 AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    //프로젝트 롬복
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //데이타베이스 관련 설정
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //Spring Data Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    //p6spy - SQL 쿼리 로깅(value가 상세히 보임)
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.session:spring-session-data-redis'

    //테스트 관련 설정
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //Spring AI
    implementation platform("org.springframework.ai:spring-ai-bom:1.0.0-SNAPSHOT")
    implementation 'org.springframework.ai:spring-ai-openai'
    implementation 'org.springframework.ai:spring-ai-starter-model-openai'

    //Amazon Web Service
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'
    implementation "io.awspring.cloud:spring-cloud-starter-aws-secrets-manager-config:2.4.4"

    //Swagger + Restdocs
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0")
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.18.2'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // Actuator & Prometheus
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

ext {
    snippetsDir = file("build/generated-snippets")
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir

    finalizedBy 'asciidoctor', 'copyDocument', 'jacocoTestReport', 'jacocoTestCoverageVerification'
}

tasks.named('build') {
    dependsOn copyDocument
}

//------------------ QueryDSL 설정 ------------------

def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory.set(querydslDir)
}

sourceSets {
    main.java.srcDirs += [querydslDir]
}

clean.doLast {
    file(querydslDir).deleteDir()
}

//------------------ restdocs 설정 ------------------

openapi3 {
    setServer("http://localhost:8080")
    title = "AI 운세 서비스 restdoc-swagger API 문서"
    description = "AI 운세 서비스 API 명세서"
    version = "v0.0.1"
    format = "yaml"
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor
    from layout.buildDirectory.dir("docs/asciidoc")
    into layout.projectDirectory.dir("src/main/resources/static/docs")
}

//-----------JaCoCo 설정 ----------------

jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    reports {
        html.required = true
    }

    def QDomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        QDomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application.class',
                            '**/*Config.class',
                            '**/*Dto.class',
                            '**/*Request.class',
                            '**/*Response.class',
                            '**/*Interceptor.class',
                            '**/*Exception.class',
                            '**/domain/**',
                            '**/dto/**',
                            '**.*config.*',
                            '**.*exception.*'
                    ] + QDomains)
                })
        )
    }
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    def QDomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        QDomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = [
                    '**.*Application*',
                    '**.*Config*',
                    '**.*Dto*',
                    '**.*Request*',
                    '**.*Response*',
                    '**.*Interceptor*',
                    '**.*Exception*',
                    '**.*domain.*',
                    '**.*dto.*',
                    '**.*config.*',
                    '**.*exception.*'
            ] + QDomains
        }
    }
}